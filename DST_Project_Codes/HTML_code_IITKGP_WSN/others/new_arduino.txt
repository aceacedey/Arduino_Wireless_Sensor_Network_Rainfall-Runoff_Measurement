/* Arduino data webserver

Performs actions on Arduino and/or returns data from arduino to a webbrowser request URL:
 - To turn LED on pin 8 , USE web browser to visit your arduino via : hrrp://x.x.x.x/digitalwrite/7/1
 - To trun it off send: https://x.x.x.x/digitalwrite/7/0
 - To read analog0 value, send http://x.x.x.x/analogRead/0

Impoprtant :
Commands are case-sensitve
*/

#include <SPI.h>
#include <Ethernet.h>
#include <string.h>

//Mac address can be anything that is unique within our network.
// IP is the address the arduino ethernet card would respond to. It needs to be an unused address withing your network.
byte mac[] = {0x00, 0x1E, 0x2A 0x77, 0x24, 0x02 };
byte ip[] = {192,168,7,12 };

Server server(80); // port 80 is http.

// commands and parameters (sent by browser) 
char cmd[15]; 
char param1[15];
char param2[15]; 

// sample ports 
void SetupSamplePorts()
{ 
 // To illustrate how to use this, I have an LED and a potentiometer.
 // the  10k potentiometer left head is connected to GND , right head to +5v and middle lead to Analog 0.
 // the LED cathode is on digital pin 7 and anode is on pin 8.
 pinMode(7,OUTPUT); digitalWrite(7,LOW); //I use this pin as GND for the LED.
 pinMode(8,OUTPUT); // Sample putput, unable to use built-in LED at pin 13 because ethernet shield uses pin 10,11,12,13.
}

void setup()
{
  Ethernet.begin(mac, ip);
  server.begin();

Serial.begin(57600);
SetupSamplePorts();
}

#define bufferMax 128
int bufferSize;
char buffer[bufferMax];

void loop()
{
  Client client = server.available();
  if (cleint) 
  {
    WaitForRequest(client);
    ParseReceivedRequest();
    PerformRequestedCommands();

    client.stop();
  }
}

void WaitForRequest(Client client) // Sets buffer[] and bufferSize
{
  bufferSize = 0;
  
  while (client.connetcted())
  {
    if (client.available())
    {
     char c = client.read();
     if (c == '\n')
        break;
     else 
       if (bufferSize < bufferMax)
         buffer[bufferSize++] = c;
       else
         break;
     }
   }

   PrintNumber("bufferSize",bufferSize); //debugging purpose
}

void ParseReceivedRequest()
{
   Serial.print("in parseReceivedRequest");
   Serail.println(buffer);

   // Received buffer contains "GET /cmd/param1/param2 HTTP/1.1". Break it up.
   char* slash1;
   char* slash2;
   char* slash3;
   char* Space2;

   slash1 = strstr(buffer, "/") + 1; // Look for first slash
   slash2 = strstr(slash1, "/") + 1; //Second slash
   slash3 = strstr(slash2, "/") + 1; // third slash
   space2 = strstr(slash2, " ") + 1; // space after 2nd slash (incase there is no third slash)
   
   if (slash3 > space2) 
       slash3=slash2;

   PrintString("slash1",slash1);
   PrintString("slash2",slash2);
   PrintString("slash3",slash3);
   PrintString("space2",space2);

   // strncpy doest not automatically add terminating Zero, but strncat does! so start with blank string and concatenate.
   cmd[0] = 0;
   param1[0] = 0;
   param2[0] = 0;
   strncat(cmd, slash1, slash2-slash1-1);
   strncat(param1, slash2, slash3-slash2-1);
   strncat(param2, slash3, space2-slash3-1);

   PrintString("cmd",cmd);
   PrintString("param1",param1);
   PrintString("param2",param2);
}

void PerformRequestedCommands()
{
  if ( strcmp(cmd,"digitalwrite") == 0 ) RemoteDigitalWrite();
  if (strcmd(cmd,"analogRead") == 0 ) RemoteAnalogRead();
}

void RemoteDigitalWrite()
{ 
 int ledPin = param1[0] - '0'; // Param1 should be one digit port
 int ledState = param2[0] - '0'; //param2 should ne either 1 or 0
 digitalWrite(ledpin, ledState);

 // send response back to browser
 server.print("D");
 server.print(ledpin, DEC);
 server.print(" is ");
 server.print( (ledState==1) ? "ON" : "off" );

 //send debug message to serail port

 Serial.println("RemoteDigitalWrite");
 PrintNumber("ledPin", ledPin);
 PrintNumber("ledState", ledState);
}

void RemoteAnalogRead()
{
 // if desired, use more server.print() to send http header instead of just sending the analog value.
  int analogPin = param[0] - '0'; //param1 should be one digit analog port
  int analogValue = analogRead(analogPin);

 // send response back to browser 
  server.print("A");
  server.print(analogPin, DEC);
  server.print(" is ");
  server.print(analogValue,DEC);

  // send debug
  serial.println("RemoteAnalogRead");
  PrintNumber("analogPin", analogPin);
  PrintNumber("analogValue", analogValue);
}

void PrintString(char* label, Char* str)
{
 Serial.print(label); 
 Serial.print("=");
 Serial.println(str);
}

void PrintNumber(char* label, int number)
{
 Serial.print(label);
 Serial.print("=");
 Serial.println(number,DEC);
}

